// Code generated by "enumer -type Suit,Value -output card_constants_generated.go -linecomment -json"; DO NOT EDIT.

package cards

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SuitName = "HeartsDiamondsClubsSpades"

var _SuitIndex = [...]uint8{0, 6, 14, 19, 25}

const _SuitLowerName = "heartsdiamondsclubsspades"

func (i Suit) String() string {
	i -= 1
	if i >= Suit(len(_SuitIndex)-1) {
		return fmt.Sprintf("Suit(%d)", i+1)
	}
	return _SuitName[_SuitIndex[i]:_SuitIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SuitNoOp() {
	var x [1]struct{}
	_ = x[Hearts-(1)]
	_ = x[Diamonds-(2)]
	_ = x[Clubs-(3)]
	_ = x[Spades-(4)]
}

var _SuitValues = []Suit{Hearts, Diamonds, Clubs, Spades}

var _SuitNameToValueMap = map[string]Suit{
	_SuitName[0:6]:        Hearts,
	_SuitLowerName[0:6]:   Hearts,
	_SuitName[6:14]:       Diamonds,
	_SuitLowerName[6:14]:  Diamonds,
	_SuitName[14:19]:      Clubs,
	_SuitLowerName[14:19]: Clubs,
	_SuitName[19:25]:      Spades,
	_SuitLowerName[19:25]: Spades,
}

var _SuitNames = []string{
	_SuitName[0:6],
	_SuitName[6:14],
	_SuitName[14:19],
	_SuitName[19:25],
}

// SuitString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SuitString(s string) (Suit, error) {
	if val, ok := _SuitNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SuitNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Suit values", s)
}

// SuitValues returns all values of the enum
func SuitValues() []Suit {
	return _SuitValues
}

// SuitStrings returns a slice of all String values of the enum
func SuitStrings() []string {
	strs := make([]string, len(_SuitNames))
	copy(strs, _SuitNames)
	return strs
}

// IsASuit returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Suit) IsASuit() bool {
	for _, v := range _SuitValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Suit
func (i Suit) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Suit
func (i *Suit) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Suit should be a string, got %s", data)
	}

	var err error
	*i, err = SuitString(s)
	return err
}

const _ValueName = "AceSevenEightNineTenJackQueenKing"

var _ValueIndex = [...]uint8{0, 3, 8, 13, 17, 20, 24, 29, 33}

const _ValueLowerName = "aceseveneightninetenjackqueenking"

func (i Value) String() string {
	i -= 1
	if i >= Value(len(_ValueIndex)-1) {
		return fmt.Sprintf("Value(%d)", i+1)
	}
	return _ValueName[_ValueIndex[i]:_ValueIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ValueNoOp() {
	var x [1]struct{}
	_ = x[Ace-(1)]
	_ = x[Seven-(2)]
	_ = x[Eight-(3)]
	_ = x[Nine-(4)]
	_ = x[Ten-(5)]
	_ = x[Jack-(6)]
	_ = x[Queen-(7)]
	_ = x[King-(8)]
}

var _ValueValues = []Value{Ace, Seven, Eight, Nine, Ten, Jack, Queen, King}

var _ValueNameToValueMap = map[string]Value{
	_ValueName[0:3]:        Ace,
	_ValueLowerName[0:3]:   Ace,
	_ValueName[3:8]:        Seven,
	_ValueLowerName[3:8]:   Seven,
	_ValueName[8:13]:       Eight,
	_ValueLowerName[8:13]:  Eight,
	_ValueName[13:17]:      Nine,
	_ValueLowerName[13:17]: Nine,
	_ValueName[17:20]:      Ten,
	_ValueLowerName[17:20]: Ten,
	_ValueName[20:24]:      Jack,
	_ValueLowerName[20:24]: Jack,
	_ValueName[24:29]:      Queen,
	_ValueLowerName[24:29]: Queen,
	_ValueName[29:33]:      King,
	_ValueLowerName[29:33]: King,
}

var _ValueNames = []string{
	_ValueName[0:3],
	_ValueName[3:8],
	_ValueName[8:13],
	_ValueName[13:17],
	_ValueName[17:20],
	_ValueName[20:24],
	_ValueName[24:29],
	_ValueName[29:33],
}

// ValueString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ValueString(s string) (Value, error) {
	if val, ok := _ValueNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ValueNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Value values", s)
}

// ValueValues returns all values of the enum
func ValueValues() []Value {
	return _ValueValues
}

// ValueStrings returns a slice of all String values of the enum
func ValueStrings() []string {
	strs := make([]string, len(_ValueNames))
	copy(strs, _ValueNames)
	return strs
}

// IsAValue returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Value) IsAValue() bool {
	for _, v := range _ValueValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Value
func (i Value) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Value
func (i *Value) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Value should be a string, got %s", data)
	}

	var err error
	*i, err = ValueString(s)
	return err
}
